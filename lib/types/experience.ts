// 경험치 시스템 타입 정의
// 레벨업 공식과 일일 제한을 포함한 포괄적인 경험치 관리

import type { StatType } from './game-common'

// 활동 품질 등급
export const ACTIVITY_QUALITY = {
  D: 'D', // 단순 클릭
  C: 'C', // 활동명만 입력
  B: 'B', // 구체적 설명 포함
  A: 'A', // 시간/장소 포함
  S: 'S'  // 사진/동영상 인증
} as const

export type ActivityQuality = typeof ACTIVITY_QUALITY[keyof typeof ACTIVITY_QUALITY];

// 활동 타입
export interface Activity {
  readonly id?: number;
  readonly _userId: string;
  readonly _statType: StatType;
  readonly activityName: string;
  readonly description?: string;
  readonly quality: ActivityQuality;
  readonly experience: number;
  readonly timestamp: Date;
  readonly location?: string;
  readonly duration?: number; // 분 단위
  readonly mediaUrl?: string;
  readonly tags?: ReadonlyArray<string>;
  readonly synced: boolean;
  readonly metadata?: ActivityMetadata;
}

// 활동 메타데이터
export interface ActivityMetadata {
  readonly device?: string;
  readonly appVersion?: string;
  readonly method: InputMethod;
  readonly voiceTranscript?: string;
  readonly autoGenerated?: boolean;
}

export type InputMethod = 'manual' | 'voice' | 'ai_suggestion' | 'quick_action';

// 경험치 설정
export interface ExperienceConfig {
  readonly baseExpTable: ExpTable;
  readonly dailyLimits: DailyLimitConfig;
  readonly bonuses: BonusConfig;
  readonly penalties: PenaltyConfig;
}

// 경험치 테이블
export interface ExpTable {
  readonly formula: ExpFormula;
  readonly maxLevel: number;
  readonly prestigeEnabled: boolean;
  readonly customMilestones?: ReadonlyArray<LevelMilestone>;
}

export interface ExpFormula {
  readonly type: 'exponential' | 'polynomial' | 'custom';
  readonly baseExp: number;
  readonly growthRate: number;
  readonly exponent?: number;
  readonly customFunction?: (_level: number) => number;
}

export interface LevelMilestone {
  readonly _level: number;
  readonly requiredExp: number;
  readonly rewards?: MilestoneReward;
}

export interface MilestoneReward {
  readonly title?: string;
  readonly items?: ReadonlyArray<string>;
  readonly bonusStats?: number;
  readonly specialUnlock?: string;
}

// 일일 제한 설정
export interface DailyLimitConfig {
  readonly baseLimits: StatLimits;
  readonly bonusLimits: BonusLimits;
  readonly resetTime: string; // HH:MM format
  readonly carryOverEnabled: boolean;
  readonly carryOverPercentage?: number;
}

export interface StatLimits {
  readonly [key: string]: number | undefined; // statType -> limit
  readonly global?: number; // 전체 일일 한도
}

export interface BonusLimits {
  readonly weekend: number;
  readonly holiday: number;
  readonly streak: ReadonlyArray<StreakBonus>;
  readonly premium?: number;
}

export interface StreakBonus {
  readonly days: number;
  readonly bonusLimit: number;
}

// 보너스 설정
export interface BonusConfig {
  readonly quality: QualityBonus;
  readonly variety: VarietyBonus;
  readonly timing: TimingBonus;
  readonly social: SocialBonus;
  readonly achievement: AchievementBonus;
}

export type QualityBonus = {
  readonly [K in ActivityQuality]: number;
}

export interface VarietyBonus {
  readonly thresholds: ReadonlyArray<{
    readonly activities: number;
    readonly bonus: number;
  }>;
  readonly timeWindow: number; // 시간 단위
}

export interface TimingBonus {
  readonly morning: { start: string; end: string; bonus: number };
  readonly afternoon: { start: string; end: string; bonus: number };
  readonly evening: { start: string; end: string; bonus: number };
  readonly lateNight: { start: string; end: string; bonus: number };
}

export interface SocialBonus {
  readonly sharedActivity: number;
  readonly groupActivity: number;
  readonly mentoring: number;
}

export interface AchievementBonus {
  readonly firstTime: number;
  readonly milestone: number;
  readonly perfect: number;
}

// 페널티 설정
export interface PenaltyConfig {
  readonly repetition: RepetitionPenalty;
  readonly inactivity: InactivityPenalty;
  readonly abuse: AbusePrevention;
}

export interface RepetitionPenalty {
  readonly enabled: boolean;
  readonly thresholds: ReadonlyArray<{
    readonly count: number;
    readonly penalty: number;
  }>;
  readonly resetPeriod: number; // 시간 단위
}

export interface InactivityPenalty {
  readonly enabled: boolean;
  readonly gracePeriod: number; // 일 단위
  readonly penaltyPerDay: number;
  readonly maxPenalty: number;
}

export interface AbusePrevention {
  readonly minTimeBetweenActivities: number; // 분 단위
  readonly maxActivitiesPerHour: number;
  readonly suspiciousPatternDetection: boolean;
  readonly autoQualityDowngrade: boolean;
}

// 일일 경험치 제한
export interface DailyExpLimit {
  readonly _userId: string;
  readonly _statType: StatType;
  readonly date: Date;
  readonly baseLimit: number;
  readonly bonusLimit: number;
  readonly currentExp: number;
  readonly activityCount: number;
  readonly uniqueActivities: number;
  readonly lastActivityTime: Date;
  readonly streakDays: number;
  readonly violations: number;
}

// 레벨 정보
export interface LevelInfo {
  readonly _level: number;
  readonly currentExp: number;
  readonly requiredExp: number;
  readonly _totalExp: number;
  readonly progress: number; // 0-100
  readonly nextLevelExp: number;
  readonly prestigeLevel?: number;
}

// 경험치 계산 결과
export interface ExpCalculationResult {
  readonly baseExp: number;
  readonly qualityMultiplier: number;
  readonly bonuses: ReadonlyArray<AppliedBonus>;
  readonly penalties: ReadonlyArray<AppliedPenalty>;
  readonly finalExp: number;
  readonly capped: boolean;
  readonly cappedAt?: number;
  readonly warnings?: ReadonlyArray<string>;
}

export interface AppliedBonus {
  readonly type: string;
  readonly name: string;
  readonly value: number;
  readonly description?: string;
}

export interface AppliedPenalty {
  readonly type: string;
  readonly name: string;
  readonly value: number;
  readonly reason: string;
}

// 통계 및 분석
export interface ExpStatistics {
  readonly _userId: string;
  readonly period: StatPeriod;
  readonly _totalExp: number;
  readonly averageDaily: number;
  readonly peakDay: { date: Date; _exp: number };
  readonly statDistribution: Record<StatType, number>;
  readonly qualityDistribution: Record<ActivityQuality, number>;
  readonly streakInfo: StreakInfo;
  readonly trends: ExpTrend[];
}

export type StatPeriod = 'daily' | 'weekly' | 'monthly' | 'yearly' | 'all_time';

export interface StreakInfo {
  readonly current: number;
  readonly longest: number;
  readonly breaks: number;
  readonly reliability: number; // 0-100
}

export interface ExpTrend {
  readonly period: string;
  readonly _exp: number;
  readonly growth: number; // percentage
  readonly activities: number;
}

// 경험치 관련 이벤트
export interface ExpEvent {
  readonly type: ExpEventType;
  readonly _userId: string;
  readonly timestamp: Date;
  readonly data: ExpEventData;
}

export type ExpEventType =
  | 'exp_gained'
  | 'level_up'
  | 'daily_limit_reached'
  | 'streak_bonus'
  | 'milestone_reached'
  | 'penalty_applied'
  | 'suspicious_activity';

export interface ExpEventData {
  readonly statType?: StatType;
  readonly amount?: number;
  readonly oldLevel?: number;
  readonly newLevel?: number;
  readonly milestone?: string;
  readonly reason?: string;
}

// 헬퍼 함수 타입
export interface ExpCalculator {
  calculateRequiredExp(_level: number): number;
  calculateLevel(_totalExp: number): LevelInfo;
  calculateActivityExp(_activity: Activity, _context: ExpContext): ExpCalculationResult;
  checkDailyLimit(_userId: string, _statType: StatType, _exp: number): Promise<DailyLimitCheck>;
}

export interface ExpContext {
  readonly user: UserExpContext;
  readonly time: Date;
  readonly previousActivities: ReadonlyArray<Activity>;
  readonly bonusEvents?: ReadonlyArray<string>;
}

export interface UserExpContext {
  readonly _userId: string;
  readonly _level: number;
  readonly streakDays: number;
  readonly isPremium: boolean;
  readonly timezone: string;
}

export interface DailyLimitCheck {
  readonly allowed: boolean;
  readonly grantedExp: number;
  readonly remainingLimit: number;
  readonly resetIn: number; // 분 단위
  readonly reason?: string;
}

// 경험치 관련 상수
export const EXP_CONSTANTS = {
  BASE_EXP_PER_LEVEL: 100,
  LEVEL_GROWTH_RATE: 1.5,
  MAX_LEVEL: 100,
  PRESTIGE_MAX_LEVEL: 10,
  DEFAULT_DAILY_LIMIT: 500,
  MIN_ACTIVITY_INTERVAL: 60, // 초
  STREAK_BREAK_HOURS: 48,
  QUALITY_MULTIPLIERS: {
    D: 1.0,
    C: 1.5,
    B: 2.0,
    A: 2.5,
    S: 3.0
  }
} as const

// 타입 가드
export function isValidActivity(_activity: unknown): activity is Activity {
  if (typeof activity !== 'object' || activity === null) {
    return false
  }

  const a = activity as Record<string, unknown>

  return (
    typeof a.userId === 'string' &&
    typeof a.statType === 'string' &&
    typeof a.activityName === 'string' &&
    Object.values(ACTIVITY_QUALITY).includes(a.quality as ActivityQuality) &&
    typeof a.experience === 'number' &&
    a.timestamp instanceof Date
  )
}

// Result 타입
export type Result<T, E = Error> =
  | { success: true; data: T }
  | { success: false; error: E };
