'use client'

import React, { createContext, useContext, useState, useEffect, useCallback, useMemo, ReactNode } from 'react'
import { db } from '@/lib/database/client'
import type { PlayerDataValue } from '@/lib/database/types'
import { dbHelpers } from '@/lib/database'
import {
  ShopState,
  ShopItem,
  InventoryItem,
  PlayerInventory,
  ItemCategory,
  ItemRarity,
  PurchaseRecord,
  DEFAULT_SHOP_ITEMS
} from './types'
import { ALL_ITEMS } from '@/lib/data/items'
import type { Item } from '@/lib/types/item-system'
import { playerService } from '@/lib/services/player.service'
import { shopSyncService } from '@/lib/services/shop-sync.service'

// ÏïÑÏù¥ÏΩò Îß§Ìïë Ìï®Ïàò
function getItemIcon(item: Item): string {
  const name = item.name.toLowerCase()

  if (item.type === 'weapon') {
    if (name.includes('Í≤Ä') || name.includes('sword')) {
      return 'üó°Ô∏è'
    }
    if (name.includes('ÎèÑÎÅº') || name.includes('axe')) {
      return 'ü™ì'
    }
    if (name.includes('Ï∞Ω') || name.includes('spear')) {
      return 'üéØ'
    }
    if (name.includes('Ìôú') || name.includes('bow')) {
      return 'üèπ'
    }
    if (name.includes('ÏßÄÌå°Ïù¥') || name.includes('staff')) {
      return 'ü™Ñ'
    }
    return '‚öîÔ∏è'
  }

  if (item.type === 'armor') {
    if (name.includes('Ìà¨Íµ¨') || name.includes('helm')) {
      return 'ü¶ñ'
    }
    if (name.includes('Î∂ÄÏ∏†') || name.includes('boot')) {
      return 'üë¢'
    }
    if (name.includes('Ïû•Í∞ë') || name.includes('glove')) {
      return 'üß§'
    }
    return 'üõΩÔ∏è'
  }

  if (item.type === 'accessory') {
    if (name.includes('Î∞òÏßÄ') || name.includes('ring')) {
      return 'üíç'
    }
    if (name.includes('Î™©Í±∏Ïù¥') || name.includes('necklace')) {
      return 'üìø'
    }
    return 'üíé'
  }

  if (item.type === 'consumable') {
    if (name.includes('Ìè¨ÏÖò') || name.includes('potion')) {
      return 'üß™'
    }
    if (name.includes('Îπµ') || name.includes('ÏùåÏãù')) {
      return 'üçñ'
    }
    if (name.includes('Ï£ºÎ¨∏ÏÑú') || name.includes('scroll')) {
      return 'üìú'
    }
    return 'üß™'
  }

  if (item.type === 'material') {
    if (name.includes('Í¥ëÏÑù') || name.includes('ore')) {
      return '‚õèÔ∏è'
    }
    if (name.includes('Î≥¥ÏÑù')) {
      return 'üíé'
    }
    if (name.includes('Í∞ÄÏ£Ω')) {
      return 'üßø'
    }
    return 'ü™µ'
  }

  return 'üì¶'
}

interface ShopContextType {
  state: ShopState
  isLoading: boolean
  coins: number
  purchaseItem: (item: ShopItem, quantity?: number) => Promise<boolean>
  equipItem: (itemId: string) => Promise<boolean>
  unequipItem: (itemId: string) => Promise<boolean>
  useConsumableItem: (itemId: string) => Promise<boolean>
  setSelectedCategory: (category: ItemCategory | 'all') => void
  getFilteredItems: () => ShopItem[]
  getInventoryItems: () => InventoryItem[]
  getEquippedItems: () => { weapon?: InventoryItem; armor?: InventoryItem; accessory?: InventoryItem }
  addCoins: (amount: number) => Promise<void>
  spendCoins: (amount: number) => Promise<boolean>
  addItemToInventory: (item: ShopItem, quantity?: number) => Promise<void>
}

const ShopContext = createContext<ShopContextType | undefined>(undefined)

const DEFAULT_INVENTORY: PlayerInventory = {
  items: [],
  equippedItems: {},
  coins: 100
}

const DEFAULT_SHOP_STATE: ShopState = {
  items: DEFAULT_SHOP_ITEMS,
  inventory: DEFAULT_INVENTORY,
  selectedCategory: 'all',
  purchaseHistory: []
}

// ÌÉÄÏûÖ Í∞ÄÎìú Ìï®ÏàòÎì§
function isInventoryData(data: unknown): data is PlayerInventory {
  if (!data || typeof data !== 'object') {
    return false
  }
  const obj = data as Record<string, unknown>
  return (
    Array.isArray(obj.items) &&
    typeof obj.equippedItems === 'object' &&
    obj.equippedItems !== null &&
    typeof obj.coins === 'number'
  )
}

function isPurchaseRecord(data: unknown): data is PurchaseRecord {
  if (!data || typeof data !== 'object') {
    return false
  }
  const obj = data as Record<string, unknown>
  return (
    typeof obj.itemId === 'string' &&
    typeof obj.itemName === 'string' &&
    typeof obj.price === 'number' &&
    (obj.purchaseDate instanceof Date || typeof obj.purchaseDate === 'string')
  )
}

export function ShopProvider({ children }: { children: ReactNode }) {
  const [state, setState] = useState<ShopState>(DEFAULT_SHOP_STATE)
  const [isLoading, setIsLoading] = useState(true)
  const [isInitialized, setIsInitialized] = useState(false)
  const timerIdRef = React.useRef(`shop-load-${Date.now()}`)

  // ÏïàÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ìï®Ïàò
  const loadShopData = useCallback(async() => {
    if (isInitialized) {
      return
    } // Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎêú Í≤ΩÏö∞ skip

    try {
      setIsLoading(true)

      // DB Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
      if (!db || !db.playerData) {
        console.warn('‚ö†Ô∏è Database not ready, using default data')
        setState(DEFAULT_SHOP_STATE)
        return
      }

      // Î≥ëÎ†¨Î°ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const [inventoryResult, historyResult] = await Promise.all([
        db.playerData.get('inventory').catch(error => {
          console.warn('‚ö†Ô∏è Failed to load inventory:', error)
          return null
        }),
        db.playerData.get('purchaseHistory').catch(error => {
          console.warn('‚ö†Ô∏è Failed to load purchase history:', error)
          return null
        })
      ])

      // Ïù∏Î≤§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
      let inventory = DEFAULT_INVENTORY
      if (inventoryResult?.data && isInventoryData(inventoryResult.data)) {
        inventory = inventoryResult.data
      }

      // Íµ¨Îß§ Ïù¥Î†• Ï≤òÎ¶¨
      let purchaseHistory: PurchaseRecord[] = []
      if (historyResult?.data && Array.isArray(historyResult.data)) {
        purchaseHistory = historyResult.data
          .filter(isPurchaseRecord)
          .map((record) => ({
            ...record,
            purchaseDate: record.purchaseDate instanceof Date
              ? record.purchaseDate
              : new Date(record.purchaseDate)
          }))
      }

      // Î™®Îì† ÏïÑÏù¥ÌÖúÏùÑ ShopItemÏúºÎ°ú Î≥ÄÌôò
      const allShopItems = Object.values(ALL_ITEMS).map(item => ({
        id: item.id,
        name: item.name,
        description: item.description,
        category: item.type as ItemCategory,
        rarity: item.rarity as ItemRarity,
        price: item.value,
        icon: getItemIcon(item),
        isEquippable: item.type === 'weapon' || item.type === 'armor' || item.type === 'accessory',
        maxStack: item.maxStack,
        effects: [
          ...Object.entries(item.baseStats || {}).map(([stat, value]) => {
            const statNames: Record<string, string> = {
              attack: 'Í≥µÍ≤©Î†•',
              defense: 'Î∞©Ïñ¥Î†•',
              hp: 'Ï≤¥Î†•',
              mp: 'ÎßàÎÇò',
              speed: 'ÏÜçÎèÑ',
              critRate: 'ÏπòÎ™ÖÌÉÄÏú®',
              critDamage: 'ÏπòÎ™ÖÌÉÄ Îç∞ÎØ∏ÏßÄ'
            }
            return `${statNames[stat] || stat} +${value}`
          })
        ]
      }))

      setState({
        items: allShopItems,
        inventory,
        selectedCategory: 'all',
        purchaseHistory
      })

      setIsInitialized(true)
    } catch (error) {
      console.error('üö´ Shop data load error:', error)
      setState(DEFAULT_SHOP_STATE)
    } finally {
      setIsLoading(false)
    }
  }, [isInitialized])

  // Ï¥àÍ∏∞ Î°úÎìú
  useEffect(() => {
    // DBÍ∞Ä Ï§ÄÎπÑÎêòÏóàÎäîÏßÄ ÌôïÏù∏ ÌõÑ Ï¶âÏãú Î°úÎìú
    if (db && db.playerData) {
      loadShopData()
    } else {
      // DBÍ∞Ä ÏóÜÏúºÎ©¥ ÏßßÏùÄ ÏßÄÏó∞ ÌõÑ Ïû¨ÏãúÎèÑ
      const timer = setTimeout(() => {
        loadShopData()
      }, 10)
      return () => clearTimeout(timer)
    }
  }, [loadShopData])

  // Ïù∏Î≤§ÌÜ†Î¶¨ Ï†ÄÏû• (ÎîîÎ∞îÏö¥Ïä§ Ï†ÅÏö©)
  const saveInventory = useCallback(async(inventory: PlayerInventory) => {
    try {
      if (!db || !db.playerData) {
        console.warn('‚ö†Ô∏è Cannot save inventory: database not ready')
        return
      }

      await db.playerData.put({
        id: 'inventory',
        data: inventory as PlayerDataValue,
        updatedAt: new Date()
      })

      setState(prev => ({ ...prev, inventory }))
    } catch (error) {
      console.error('‚ùå Failed to save inventory:', error)
    }
  }, [])

  // Íµ¨Îß§ Ïù¥Î†• Ï†ÄÏû•
  const savePurchaseHistory = useCallback(async(history: PurchaseRecord[]) => {
    try {
      if (!db || !db.playerData) {
        console.warn('‚ö†Ô∏è Cannot save purchase history: database not ready')
        return
      }

      await db.playerData.put({
        id: 'purchaseHistory',
        data: history as PlayerDataValue,
        updatedAt: new Date()
      })

      setState(prev => ({ ...prev, purchaseHistory: history }))
    } catch (error) {
      console.error('‚ùå Failed to save purchase history:', error)
    }
  }, [])

  // ÏïÑÏù¥ÌÖú Íµ¨Îß§
  const purchaseItem = useCallback(async(item: ShopItem, quantity = 1): Promise<boolean> => {
    try {
      // ÎèôÍ∏∞Ìôî ÏÑúÎπÑÏä§Î•º ÌÜµÌïú Íµ¨Îß§ Ï≤òÎ¶¨
      const result = await shopSyncService.purchaseItem('current-user', item, quantity)

      if (!result.success) {
        console.error('‚ùå Purchase failed:', result.message)
        return false
      }

      // ÌîåÎ†àÏù¥Ïñ¥ Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î∂àÎü¨Ïò§Í∏∞
      const player = await playerService.getPlayer('current-user')
      if (!player) {
        return false
      }

      // UI ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      const newInventory = { ...state.inventory }
      const existingItem = newInventory.items.find(invItem => invItem.id === item.id)

      if (existingItem) {
        existingItem.quantity += quantity
      } else {
        const inventoryItem: InventoryItem = {
          ...item,
          quantity,
          isEquipped: false,
          purchaseDate: new Date()
        }
        newInventory.items.push(inventoryItem)
      }

      newInventory.coins = player.gold

      // Íµ¨Îß§ Í∏∞Î°ù Ï†ÄÏû•
      const purchaseRecord: PurchaseRecord = {
        itemId: item.id,
        itemName: item.name,
        price: result.goldSpent || 0,
        purchaseDate: new Date(),
        quantity
      }

      const newHistory = [...state.purchaseHistory, purchaseRecord]

      await Promise.all([
        saveInventory(newInventory),
        savePurchaseHistory(newHistory)
      ])

      console.log(result.message)
      return true
    } catch (error) {
      console.error('‚ùå Purchase failed:', error)
      return false
    }
  }, [state.inventory, state.purchaseHistory, saveInventory, savePurchaseHistory])

  // ÏïÑÏù¥ÌÖú Ïû•Ï∞©
  const equipItem = useCallback(async(itemId: string): Promise<boolean> => {
    const item = state.inventory.items.find(item => item.id === itemId)
    if (!item || !item.isEquippable) {
      return false
    }

    const newInventory = { ...state.inventory }
    const itemCategory = item.category

    if (itemCategory === 'weapon' || itemCategory === 'armor' || itemCategory === 'accessory') {
      // Í∏∞Ï°¥ Ïû•Ï∞© Ìï¥Ï†ú
      const currentEquippedId = newInventory.equippedItems[itemCategory]
      if (currentEquippedId) {
        const currentItem = newInventory.items.find(i => i.id === currentEquippedId)
        if (currentItem) {
          currentItem.isEquipped = false
        }
      }

      // ÏÉà ÏïÑÏù¥ÌÖú Ïû•Ï∞©
      newInventory.equippedItems[itemCategory] = itemId
      const targetItem = newInventory.items.find(i => i.id === itemId)
      if (targetItem) {
        targetItem.isEquipped = true
      }

      await saveInventory(newInventory)
      return true
    }

    return false
  }, [state.inventory, saveInventory])

  // ÏïÑÏù¥ÌÖú Ïû•Ï∞© Ìï¥Ï†ú
  const unequipItem = useCallback(async(itemId: string): Promise<boolean> => {
    const item = state.inventory.items.find(item => item.id === itemId)
    if (!item || !item.isEquipped) {
      return false
    }

    const newInventory = { ...state.inventory }
    const itemCategory = item.category

    if (itemCategory === 'weapon' || itemCategory === 'armor' || itemCategory === 'accessory') {
      delete newInventory.equippedItems[itemCategory]

      const targetItem = newInventory.items.find(i => i.id === itemId)
      if (targetItem) {
        targetItem.isEquipped = false
      }

      await saveInventory(newInventory)
      return true
    }

    return false
  }, [state.inventory, saveInventory])

  // ÏÜåÎ™®Ìíà ÏÇ¨Ïö©
  const useConsumableItem = useCallback(async(itemId: string): Promise<boolean> => {
    const item = state.inventory.items.find(item => item.id === itemId)
    if (!item || item.category !== 'consumable' || item.quantity <= 0) {
      return false
    }

    const newInventory = { ...state.inventory }
    const itemIndex = newInventory.items.findIndex(item => item.id === itemId)

    if (itemIndex >= 0) {
      newInventory.items[itemIndex].quantity -= 1

      if (newInventory.items[itemIndex].quantity <= 0) {
        newInventory.items.splice(itemIndex, 1)
      }

      await saveInventory(newInventory)
      return true
    }

    return false
  }, [state.inventory, saveInventory])

  // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù
  const setSelectedCategory = useCallback((category: ItemCategory | 'all') => {
    setState(prev => ({ ...prev, selectedCategory: category }))
  }, [])

  // ÌïÑÌÑ∞ÎßÅÎêú ÏïÑÏù¥ÌÖú Í∞ÄÏ†∏Ïò§Í∏∞
  const getFilteredItems = useCallback((): ShopItem[] => {
    if (state.selectedCategory === 'all') {
      return state.items
    }
    return state.items.filter(item => item.category === state.selectedCategory)
  }, [state.items, state.selectedCategory])

  // Ïù∏Î≤§ÌÜ†Î¶¨ ÏïÑÏù¥ÌÖú Í∞ÄÏ†∏Ïò§Í∏∞
  const getInventoryItems = useCallback((): InventoryItem[] => {
    return state.inventory.items
  }, [state.inventory.items])

  // Ïû•Ï∞©Îêú ÏïÑÏù¥ÌÖú Í∞ÄÏ†∏Ïò§Í∏∞
  const getEquippedItems = useCallback(() => {
    const { equippedItems } = state.inventory
    const result: { weapon?: InventoryItem; armor?: InventoryItem; accessory?: InventoryItem } = {}

    if (equippedItems.weapon) {
      result.weapon = state.inventory.items.find(item => item.id === equippedItems.weapon)
    }
    if (equippedItems.armor) {
      result.armor = state.inventory.items.find(item => item.id === equippedItems.armor)
    }
    if (equippedItems.accessory) {
      result.accessory = state.inventory.items.find(item => item.id === equippedItems.accessory)
    }

    return result
  }, [state.inventory])

  // ÏΩîÏù∏ Ï∂îÍ∞Ä
  const addCoins = useCallback(async(amount: number) => {
    const newInventory = { ...state.inventory }
    newInventory.coins += amount
    await saveInventory(newInventory)
  }, [state.inventory, saveInventory])

  // ÏΩîÏù∏ ÏÇ¨Ïö©
  const spendCoins = useCallback(async(amount: number): Promise<boolean> => {
    if (state.inventory.coins < amount) {
      return false
    }

    const newInventory = { ...state.inventory }
    newInventory.coins -= amount
    await saveInventory(newInventory)
    return true
  }, [state.inventory, saveInventory])

  // ÏïÑÏù¥ÌÖú Ï∂îÍ∞Ä
  const addItemToInventory = useCallback(async(item: ShopItem, quantity = 1) => {
    const newInventory = { ...state.inventory }
    const existingItem = newInventory.items.find(invItem => invItem.id === item.id)

    if (existingItem) {
      if (item.maxStack && existingItem.quantity < item.maxStack) {
        existingItem.quantity = Math.min(existingItem.quantity + quantity, item.maxStack)
      }
    } else {
      const inventoryItem: InventoryItem = {
        ...item,
        quantity,
        isEquipped: false,
        purchaseDate: new Date()
      }
      newInventory.items.push(inventoryItem)
    }

    await saveInventory(newInventory)
  }, [state.inventory, saveInventory])

  // Context value Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò
  const value = useMemo<ShopContextType>(() => ({
    state,
    isLoading,
    coins: state.inventory.coins,
    purchaseItem,
    equipItem,
    unequipItem,
    useConsumableItem,
    setSelectedCategory,
    getFilteredItems,
    getInventoryItems,
    getEquippedItems,
    addCoins,
    spendCoins,
    addItemToInventory
  }), [
    state,
    isLoading,
    purchaseItem,
    equipItem,
    unequipItem,
    useConsumableItem,
    setSelectedCategory,
    getFilteredItems,
    getInventoryItems,
    getEquippedItems,
    addCoins,
    spendCoins,
    addItemToInventory
  ])

  return (
    <ShopContext.Provider value={value}>
      {children}
    </ShopContext.Provider>
  )
}

export function useShop() {
  const context = useContext(ShopContext)
  if (context === undefined) {
    throw new Error('useShop must be used within a ShopProvider')
  }
  return context
}
