import { test, expect } from '@playwright/test'

test.describe('ÏùåÏÑ± ÏûÖÎ†• Í∞ÑÎã® ÌÖåÏä§Ìä∏', () => {
  test('window.testVoiceInput Ìï®Ïàò Ïã§Ìñâ Î∞è DB Ï†ÄÏû• ÌôïÏù∏', async ({ page }) => {
    // ÏΩòÏÜî Î°úÍ∑∏ ÏàòÏßë
    const logs: string[] = []
    page.on('console', msg => {
      const text = msg.text()
      logs.push(text)
      if (text.includes('üé§') || text.includes('üìä') || text.includes('üíæ')) {
        console.log('Ï§ëÏöî Î°úÍ∑∏:', text)
      }
    })

    // ÎåÄÏãúÎ≥¥Îìú Ïù¥Îèô
    await page.goto('/dashboard')
    await page.waitForLoadState('networkidle')
    await page.waitForTimeout(2000) // Î™®Îì† Ïª¥Ìè¨ÎÑåÌä∏ Î°úÎìú ÎåÄÍ∏∞

    // 1. testVoiceInput Ìï®Ïàò Ï°¥Ïû¨ ÌôïÏù∏
    const hasFunction = await page.evaluate(() => {
      return typeof (window as any).testVoiceInput === 'function'
    })
    console.log('testVoiceInput Ìï®Ïàò Ï°¥Ïû¨:', hasFunction)
    expect(hasFunction).toBeTruthy()

    // 2. Ï¥àÍ∏∞ ÌôúÎèô Í∞úÏàò ÌôïÏù∏
    const initialCount = await page.evaluate(async () => {
      const db = await new Promise<IDBDatabase>((resolve, reject) => {
        const request = indexedDB.open('LifeRPGDatabase')
        request.onsuccess = () => resolve(request.result)
        request.onerror = () => reject(request.error)
      })
      
      const transaction = db.transaction(['activities'], 'readonly')
      const store = transaction.objectStore('activities')
      const count = await new Promise<number>((resolve, reject) => {
        const request = store.count()
        request.onsuccess = () => resolve(request.result)
        request.onerror = () => reject(request.error)
      })
      
      db.close()
      return count
    })
    console.log('Ï¥àÍ∏∞ ÌôúÎèô Í∞úÏàò:', initialCount)

    // 3. ÏùåÏÑ± ÏûÖÎ†• Ïã§Ìñâ
    console.log('\n=== ÏùåÏÑ± ÏûÖÎ†• Ïã§Ìñâ ===')
    const testText = 'ÌîåÎ†àÏù¥ÎùºÏù¥Ìä∏ ÏùåÏÑ± ÌÖåÏä§Ìä∏ ' + new Date().getTime()
    
    await page.evaluate(async ({ text }) => {
      console.log('ÌÖåÏä§Ìä∏ ÏãúÏûë:', text)
      await (window as any).testVoiceInput(text, 'health')
    }, { text: testText })

    // 4. Î°úÍ∑∏ ÎåÄÍ∏∞
    await page.waitForTimeout(3000)

    // 5. Í¥ÄÎ†® Î°úÍ∑∏ ÌôïÏù∏
    const voiceLogs = logs.filter(log => 
      log.includes('üé§') || 
      log.includes('üìä') || 
      log.includes('üíæ') ||
      log.includes('ÏùåÏÑ± ÏûÖÎ†•')
    )
    
    console.log('\n=== ÏùåÏÑ± Í¥ÄÎ†® Î°úÍ∑∏ ===')
    voiceLogs.forEach(log => console.log(log))

    // 6. DBÏóêÏÑú ÌôúÎèô ÌôïÏù∏
    const dbResult = await page.evaluate(async ({ searchText }) => {
      const db = await new Promise<IDBDatabase>((resolve, reject) => {
        const request = indexedDB.open('LifeRPGDatabase')
        request.onsuccess = () => resolve(request.result)
        request.onerror = () => reject(request.error)
      })
      
      const transaction = db.transaction(['activities'], 'readonly')
      const store = transaction.objectStore('activities')
      const activities = await new Promise<any[]>((resolve, reject) => {
        const request = store.getAll()
        request.onsuccess = () => resolve(request.result)
        request.onerror = () => reject(request.error)
      })
      
      db.close()
      
      // ÌÖåÏä§Ìä∏ ÌÖçÏä§Ìä∏ Ï∞æÍ∏∞
      const foundActivity = activities.find(a => a.activityName === searchText)
      
      return {
        totalCount: activities.length,
        found: !!foundActivity,
        lastActivity: activities[activities.length - 1],
        foundActivity
      }
    }, { searchText: testText })

    console.log('\n=== DB Í≤∞Í≥º ===')
    console.log('Ï†ÑÏ≤¥ ÌôúÎèô Í∞úÏàò:', dbResult.totalCount)
    console.log('ÌÖåÏä§Ìä∏ ÌÖçÏä§Ìä∏ Ï∞æÏùå:', dbResult.found)
    console.log('ÎßàÏßÄÎßâ ÌôúÎèô:', dbResult.lastActivity)
    
    if (dbResult.found) {
      console.log('‚úÖ ÏùåÏÑ± ÌÖçÏä§Ìä∏Í∞Ä DBÏóê Ï†ÄÏû•Îê®!')
      console.log('Ï†ÄÏû•Îêú ÌôúÎèô:', dbResult.foundActivity)
    } else {
      console.log('‚ùå ÏùåÏÑ± ÌÖçÏä§Ìä∏Í∞Ä DBÏóê Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùå')
      console.log('ÎßàÏßÄÎßâ ÌôúÎèôÏùò activityName:', dbResult.lastActivity?.activityName)
    }

    // 7. UI ÌôïÏù∏
    await page.waitForTimeout(2000)
    
    // Ïä§ÌÅ¨Î¶∞ÏÉ∑
    await page.screenshot({ path: 'voice-simple-test-result.png', fullPage: true })

    // Í≤ÄÏ¶ù
    expect(dbResult.found).toBeTruthy()
  })

  test('ÏùåÏÑ± Î≤ÑÌäº ÌÅ¥Î¶≠ ÌõÑ Ïã§Ï†ú ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏', async ({ page }) => {
    await page.goto('/dashboard')
    await page.waitForLoadState('networkidle')
    
    // 1. ÏùåÏÑ± Î≤ÑÌäº ÌÅ¥Î¶≠
    const voiceButton = page.locator('button[aria-label*="ÏùåÏÑ±"]')
    await voiceButton.click()
    
    // 2. Í±¥Í∞ï Ïä§ÌÉØ ÏÑ†ÌÉù (Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÑ†ÌÉùÏûê ÏÇ¨Ïö©)
    const healthOption = page.locator('button').filter({ has: page.locator('text=üí™') }).filter({ has: page.locator('text=Í±¥Í∞ï') })
    await healthOption.click()
    
    // 3. ÎÖπÏùå UI ÌôïÏù∏
    await page.waitForTimeout(1000)
    const recordingUI = await page.locator('text=/ÎÖπÏùå/').isVisible().catch(() => false)
    console.log('ÎÖπÏùå UI ÌëúÏãú:', recordingUI)
    
    // Ïä§ÌÅ¨Î¶∞ÏÉ∑
    await page.screenshot({ path: 'voice-recording-ui.png', fullPage: true })
    
    // 4. Web Speech API ÏßÄÏõê ÌôïÏù∏
    const speechSupport = await page.evaluate(() => {
      return {
        speechRecognition: 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window,
        speechSynthesis: 'speechSynthesis' in window
      }
    })
    
    console.log('Web Speech API ÏßÄÏõê:', speechSupport)
  })
})