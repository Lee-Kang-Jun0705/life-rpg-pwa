import { test, expect } from '@playwright/test'

interface CapturedRequest {
  url: string
  method: string
  headers: Record<string, string>
  postData?: string | null
}

test.describe('보안 취약점 테스트', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/')
    await page.evaluate(() => {
      localStorage.clear()
      sessionStorage.clear()
    })
  })

  test('1. XSS (Cross-Site Scripting) 공격 방어', async ({ page }) => {
    // 회원가입 시 XSS 시도
    await page.goto('/signup')
    
    const xssPayloads = [
      '<script>alert("XSS")</script>',
      '<img src=x onerror=alert("XSS")>',
      'javascript:alert("XSS")',
      '<svg onload=alert("XSS")>',
      '"><script>alert("XSS")</script>',
      '<iframe src="javascript:alert(\'XSS\')"></iframe>',
      '<body onload=alert("XSS")>',
      '${alert("XSS")}',
      '{{constructor.constructor("alert(1)")()}}',
    ]
    
    // 각 필드에 XSS 페이로드 입력
    for (const payload of xssPayloads) {
      await page.fill('input[name="nickname"]', payload)
      await page.fill('input[name="email"]', `test${Date.now()}@example.com`)
      await page.fill('input[name="password"]', 'SecurePass123!')
      await page.fill('input[name="passwordConfirm"]', 'SecurePass123!')
      await page.check('input[name="termsAgree"]')
      await page.check('input[name="privacyAgree"]')
      
      await page.click('button[type="submit"]')
      
      // alert가 실행되지 않았는지 확인
      await page.waitForTimeout(1000)
      const dialogPromise = page.waitForEvent('dialog', { timeout: 1000 })
        .then(() => false)
        .catch(() => true)
      
      const noAlert = await dialogPromise
      expect(noAlert).toBe(true)
      
      // 다음 테스트를 위해 초기화
      await page.reload()
    }
    
    // 프로필 페이지에서 XSS 시도
    await page.goto('/login')
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    await page.goto('/profile')
    await page.click('text=프로필 수정')
    
    await page.fill('textarea[name="bio"]', '<img src=x onerror=alert("XSS")>')
    await page.click('text=저장')
    
    // 프로필 페이지 리로드
    await page.reload()
    
    // HTML이 이스케이프되어 표시되는지 확인
    const bioText = await page.locator('[data-user-bio]').textContent()
    expect(bioText).toContain('&lt;img')
    expect(bioText).not.toContain('<img')
  })

  test('2. SQL Injection 방어', async ({ page }) => {
    await page.goto('/login')
    
    const sqlPayloads = [
      '\' OR \'1\'=\'1',
      '"; DROP TABLE users; --',
      'admin\'--',
      '\' UNION SELECT * FROM users--',
      '1\' AND \'1\'=\'1',
      '\' OR 1=1--',
      '1; DELETE FROM activities WHERE 1=1;',
    ]
    
    for (const payload of sqlPayloads) {
      await page.fill('input[name="email"]', payload)
      await page.fill('input[name="password"]', payload)
      await page.click('button[type="submit"]')
      
      // 로그인 실패 확인
      await expect(page.locator('text=로그인 실패')).toBeVisible()
      
      // 대시보드로 리다이렉트되지 않음
      expect(page.url()).not.toContain('/dashboard')
      
      await page.reload()
    }
  })

  test('3. CSRF (Cross-Site Request Forgery) 보호', async ({ page, context }) => {
    // 정상 로그인
    await page.goto('/login')
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    // CSRF 토큰 확인
    const csrfToken = await page.evaluate(() => {
      const metaTag = document.querySelector('meta[name="csrf-token"]')
      return metaTag?.getAttribute('content')
    })
    
    expect(csrfToken).toBeTruthy()
    
    // 악의적인 외부 페이지 시뮬레이션
    const maliciousPage = await context.newPage()
    await maliciousPage.setContent(`
      <html>
        <body>
          <form id="csrf-form" action="http://localhost:3000/api/activities" method="POST">
            <input name="type" value="health">
            <input name="action" value="악의적 활동">
            <input name="exp" value="9999">
          </form>
          <script>
            document.getElementById('csrf-form').submit();
          </script>
        </body>
      </html>
    `)
    
    // CSRF 공격이 실패했는지 확인
    await page.reload()
    const activities = await page.locator('[data-activity-list] [data-activity]').count()
    const maliciousActivity = await page.locator('text=악의적 활동').count()
    
    expect(maliciousActivity).toBe(0)
  })

  test('4. 인증 및 권한 검증', async ({ page, context }) => {
    // 인증되지 않은 상태에서 보호된 페이지 접근
    const protectedPages = [
      '/dashboard',
      '/profile',
      '/dungeon',
      '/shop',
      '/settings',
      '/ai-coach'
    ]
    
    for (const protectedPage of protectedPages) {
      await page.goto(protectedPage)
      await expect(page).toHaveURL('/login')
    }
    
    // 다른 사용자의 데이터 접근 시도
    // User 1 로그인
    await page.goto('/login')
    await page.fill('input[name="email"]', 'user1@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    const user1Id = await page.evaluate(() => {
      return localStorage.getItem('user_id')
    })
    
    // User 2로 로그인
    const page2 = await context.newPage()
    await page2.goto('/login')
    await page2.fill('input[name="email"]', 'user2@example.com')
    await page2.fill('input[name="password"]', 'password123')
    await page2.click('button[type="submit"]')
    await page2.waitForURL('/dashboard')
    
    // User 2가 User 1의 데이터에 접근 시도
    await page2.goto(`/api/users/${user1Id}/activities`)
    const response = await page2.locator('body').textContent()
    expect(response).toContain('403')
    expect(response).toContain('Forbidden')
  })

  test('5. 민감한 정보 노출 방지', async ({ page }) => {
    await page.goto('/login')
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    // 개발자 도구에서 민감한 정보 확인
    const localStorage = await page.evaluate(() => {
      return Object.keys(window.localStorage)
    })
    
    // 비밀번호가 저장되지 않았는지 확인
    expect(localStorage).not.toContain('password')
    expect(localStorage).not.toContain('user_password')
    
    // API 응답에서 민감한 정보 확인
    const apiResponse = await page.evaluate(async () => {
      const response = await fetch('/api/user/profile')
      return await response.json()
    })
    
    expect(apiResponse).not.toHaveProperty('password')
    expect(apiResponse).not.toHaveProperty('passwordHash')
    expect(apiResponse).not.toHaveProperty('creditCard')
  })

  test('6. 안전하지 않은 직접 객체 참조 (IDOR)', async ({ page }) => {
    await page.goto('/login')
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    // 다른 사용자의 프로필 직접 접근 시도
    await page.goto('/profile/12345') // 임의의 다른 사용자 ID
    
    // 접근 거부 또는 리다이렉트 확인
    const urlAfter = page.url()
    expect(urlAfter).not.toContain('/profile/12345')
    
    // API를 통한 직접 접근 시도
    const unauthorizedResponse = await page.evaluate(async () => {
      const response = await fetch('/api/users/12345/data')
      return {
        status: response.status,
        statusText: response.statusText
      }
    })
    
    expect(unauthorizedResponse.status).toBe(403)
  })

  test('7. 세션 관리 보안', async ({ page, context }) => {
    await page.goto('/login')
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    // 세션 타임아웃 테스트
    const sessionToken = await page.evaluate(() => {
      return localStorage.getItem('auth_token')
    })
    
    // 세션 토큰이 HttpOnly 쿠키로 저장되어야 함
    const cookies = await context.cookies()
    const sessionCookie = cookies.find(c => c.name === 'session_id')
    
    if (sessionCookie) {
      expect(sessionCookie.httpOnly).toBe(true)
      expect(sessionCookie.secure).toBe(true)
      expect(sessionCookie.sameSite).toBe('Strict')
    }
    
    // 세션 고정 공격 방지
    const oldSessionId = await page.evaluate(() => {
      return document.cookie.match(/session_id=([^;]+)/)?.[1]
    })
    
    // 로그아웃 후 재로그인
    await page.click('[data-logout-button]')
    await page.waitForURL('/login')
    
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    const newSessionId = await page.evaluate(() => {
      return document.cookie.match(/session_id=([^;]+)/)?.[1]
    })
    
    // 세션 ID가 변경되었는지 확인
    expect(newSessionId).not.toBe(oldSessionId)
  })

  test('8. 파일 업로드 보안', async ({ page }) => {
    await page.goto('/login')
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'password123')
    await page.click('button[type="submit"]')
    await page.waitForURL('/dashboard')
    
    await page.goto('/profile')
    
    // 악성 파일 업로드 시도
    const maliciousFiles = [
      { name: 'shell.php', content: '<?php system($_GET["cmd"]); ?>' },
      { name: 'virus.exe', content: 'MZ\x90\x00\x03' }, // PE 헤더
      { name: 'script.js', content: 'alert("XSS")' },
      { name: 'image.jpg.php', content: '<?php phpinfo(); ?>' },
    ]
    
    for (const file of maliciousFiles) {
      const buffer = Buffer.from(file.content)
      const filePath = `test-uploads/${file.name}`
      
      await page.setInputFiles('input[type="file"]', {
        name: file.name,
        mimeType: 'application/octet-stream',
        buffer: buffer
      })
      
      await page.click('text=업로드')
      
      // 파일이 거부되었는지 확인
      await expect(page.locator('text=허용되지 않는 파일 형식')).toBeVisible()
    }
    
    // 정상 이미지 파일 업로드
    await page.setInputFiles('input[type="file"]', 'test-screenshots/profile.jpg')
    await page.click('text=업로드')
    await expect(page.locator('text=업로드 완료')).toBeVisible()
  })

  test('9. API Rate Limiting', async ({ page }) => {
    await page.goto('/login')
    
    // 짧은 시간 내 많은 요청 시도
    const requests = []
    for (let i = 0; i < 20; i++) {
      requests.push(
        page.evaluate(async () => {
          const response = await fetch('/api/activities', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ type: 'health', action: 'test' })
          })
          return response.status
        })
      )
    }
    
    const results = await Promise.all(requests)
    
    // Rate limiting이 적용되었는지 확인
    const rateLimitedRequests = results.filter(status => status === 429)
    expect(rateLimitedRequests.length).toBeGreaterThan(0)
  })

  test('10. 암호화 및 해싱', async ({ page }) => {
    // 네트워크 트래픽 모니터링
    const requests: CapturedRequest[] = []
    page.on('request', request => {
      requests.push({
        url: request.url(),
        method: request.method(),
        headers: request.headers(),
        postData: request.postData()
      })
    })
    
    await page.goto('/login')
    await page.fill('input[name="email"]', 'test@example.com')
    await page.fill('input[name="password"]', 'MySecurePassword123!')
    await page.click('button[type="submit"]')
    
    // 로그인 요청 찾기
    const loginRequest = requests.find(r => 
      r.url.includes('/api/auth/login') && r.method === 'POST'
    )
    
    if (loginRequest && loginRequest.postData) {
      const postData = JSON.parse(loginRequest.postData)
      
      // 비밀번호가 평문으로 전송되지 않는지 확인
      expect(postData.password).not.toBe('MySecurePassword123!')
      
      // HTTPS 사용 확인
      expect(loginRequest.url).toMatch(/^https:\/\//)
    }
    
    // 로컬 스토리지 암호화 확인
    await page.waitForURL('/dashboard')
    const sensitiveData = await page.evaluate(() => {
      const data = localStorage.getItem('user_data')
      return data ? JSON.parse(data) : null
    })
    
    if (sensitiveData) {
      // 민감한 데이터가 암호화되어 있는지 확인
      expect(sensitiveData.email).not.toContain('@')
      expect(sensitiveData).not.toHaveProperty('password')
    }
  })

  test('11. 클릭재킹 방어', async ({ page }) => {
    await page.goto('/')
    
    // X-Frame-Options 헤더 확인
    const response = await page.goto('/')
    const headers = response?.headers()
    
    if (headers) {
      expect(headers['x-frame-options']).toBe('DENY')
    }
    
    // iframe 내 렌더링 시도
    await page.setContent(`
      <html>
        <body>
          <iframe src="http://localhost:3000" width="100%" height="600"></iframe>
        </body>
      </html>
    `)
    
    const iframe = page.locator('iframe')
    const iframeContent = await iframe.contentFrame()
    
    // iframe 내에서 앱이 로드되지 않는지 확인
    if (iframeContent) {
      const bodyContent = await iframeContent.locator('body').textContent()
      expect(bodyContent).not.toContain('Life RPG')
    }
  })

  test('12. 보안 헤더 검증', async ({ page }) => {
    const response = await page.goto('/')
    const headers = response?.headers()
    
    if (headers) {
      // 필수 보안 헤더 확인
      expect(headers['strict-transport-security']).toBeTruthy()
      expect(headers['x-content-type-options']).toBe('nosniff')
      expect(headers['x-frame-options']).toBe('DENY')
      expect(headers['x-xss-protection']).toBe('1; mode=block')
      expect(headers['referrer-policy']).toMatch(/no-referrer|strict-origin/)
      
      // CSP (Content Security Policy) 확인
      const csp = headers['content-security-policy']
      if (csp) {
        expect(csp).toContain("default-src 'self'")
        expect(csp).toContain("script-src")
        expect(csp).not.toContain("unsafe-inline")
        expect(csp).not.toContain("unsafe-eval")
      }
    }
  })

  test('13. 비밀번호 정책 검증', async ({ page }) => {
    await page.goto('/signup')
    
    const weakPasswords = [
      '12345678',
      'password',
      'qwerty123',
      'aaaaaaaa',
      'test1234',
      'admin123'
    ]
    
    for (const weakPassword of weakPasswords) {
      await page.fill('input[name="password"]', weakPassword)
      await page.fill('input[name="passwordConfirm"]', weakPassword)
      
      // 약한 비밀번호 경고 확인
      await expect(page.locator('text=보안 수준이 낮은 비밀번호')).toBeVisible()
    }
    
    // 강력한 비밀번호 요구사항 확인
    await page.fill('input[name="password"]', 'Str0ng!Pass#2024')
    await expect(page.locator('[data-password-strength="strong"]')).toBeVisible()
  })

  test('14. 로그 인젝션 방지', async ({ page }) => {
    await page.goto('/login')
    
    // 로그 인젝션 페이로드
    const logInjectionPayloads = [
      'test@example.com\nINFO: Admin access granted',
      'test@example.com\r\nERROR: Database corrupted',
      'test@example.com%0aWARNING: Security breach detected',
      'test@example.com%0d%0aDEBUG: Password: admin123'
    ]
    
    for (const payload of logInjectionPayloads) {
      await page.fill('input[name="email"]', payload)
      await page.fill('input[name="password"]', 'password123')
      await page.click('button[type="submit"]')
      
      // 정상적인 에러 메시지만 표시되는지 확인
      await expect(page.locator('text=이메일 또는 비밀번호가 올바르지 않습니다')).toBeVisible()
      
      await page.reload()
    }
  })
})